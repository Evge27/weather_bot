import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import datetime

TOKEN = "7568630701:AAFRGxeRjh-kVmpfWs34j6CsNWoxpqIZEuQ"
CHAT_ID = "5659803420"  # ID —á–∞—Ç–∞
WEATHER_API_KEY = "914e7cc21ac51e8250c9a536e56b9a50"
CITY = "–ë–µ–ª–≥—Ä–∞–¥"
LAT = 44.49
LON = 20.28

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

def get_weather_emoji(weather_id: int) -> str:
    if 200 <= weather_id < 300:
        return "‚õà"  # –ì—Ä–æ–∑–∞
    elif 300 <= weather_id < 400:
        return "üå¶"  # –ú–æ—Ä–æ—Å—å
    elif 500 <= weather_id < 600:
        return "üåß"  # –î–æ–∂–¥—å
    elif 600 <= weather_id < 700:
        return "‚ùÑÔ∏è"  # –°–Ω–µ–≥
    elif 700 <= weather_id < 800:
        return "üå´"  # –¢—É–º–∞–Ω, –ø—ã–ª—å, –¥—ã–º–∫–∞üå´
    elif weather_id == 800:
        return "‚òÄÔ∏è"  # –Ø—Å–Ω–æ
    elif weather_id == 801:
        return "üå§"  # –ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ
    elif weather_id == 802:
        return "‚õÖÔ∏è"  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
    elif weather_id == 803:
        return "üå•"  # –û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
    elif weather_id == 804:
        return "‚òÅÔ∏è"  # –ü–∞—Å–º—É—Ä–Ω–æ
    else:
        return "üå°"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –¥–Ω—è–º
async def get_weather_forecast(day: str, city=CITY):
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&lang=ru&units=metric&appid={WEATHER_API_KEY}"
        response = requests.get(url)
        data = response.json()

        if data.get("cod") != "200":
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"

        forecast_list = data["list"]
        today = datetime.date.today()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω—É–∂–Ω—ã–µ –¥–Ω–∏
        if day == "today":
            target_date = today
            title = "—Å–µ–≥–æ–¥–Ω—è"
        elif day == "tomorrow":
            target_date = today + datetime.timedelta(days=1)
            title = "–∑–∞–≤—Ç—Ä–∞"
        elif day == "weekend":
            target_dates = {5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}  # 5 = –°—É–±–±–æ—Ç–∞, 6 = –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            weekend_forecast = {}

            for forecast in forecast_list:
                dt_txt = forecast["dt_txt"]
                forecast_date = datetime.datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S").date()
                forecast_time = dt_txt[11:16]
                forecast_weekday = forecast_date.weekday()

                if forecast_weekday in target_dates and forecast_time == "12:00":
                    weather_id = forecast["weather"][0]["id"]
                    emoji_main = get_weather_emoji(weather_id)

                if forecast_weekday in target_dates and forecast_time in ["09:00", "15:00", "21:00"]:
                    weather_desc = forecast["weather"][0]["description"].capitalize()
                    weather_id = forecast["weather"][0]["id"]
                    emoji = get_weather_emoji(weather_id)
                    temp = round(forecast["main"]["temp"],1)
                    wind_speed = forecast["wind"]["speed"]

                    if forecast_date not in weekend_forecast:
                        weekend_forecast[forecast_date] = []

                    weekend_forecast[forecast_date].append(f"{forecast_time} - üå° {temp}¬∞C, üí® {wind_speed} –º/—Å, {emoji}{weather_desc}")
                    print(weather_id)


            if not weekend_forecast:
                return "‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω."

            forecast_msg = f" {emoji_main} <b>–í—ã—Ö–æ–¥–Ω—ã–µ –≤ {CITY}</b>\n\n"
            for date, values in weekend_forecast.items():
                day_name = target_dates[date.weekday()]
                forecast_msg += f"<b>{day_name} ({date.strftime('%d.%m')}):</b>\n" + "\n".join(values) + "\n\n"

            return forecast_msg

        else:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑–∞!"

        forecast_msg = f" <b>{CITY} {title} </b>\n\n"

        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 09:00, 12:00, 15:00, 18:00, 21:00
        for forecast in forecast_list:
            dt_txt = forecast["dt_txt"]
            forecast_date = datetime.datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S").date()
            forecast_time = dt_txt[11:16]

            if forecast_date == target_date and forecast_time in ["09:00", "15:00", "21:00"]:
                weather_desc = forecast["weather"][0]["description"].capitalize()
                weather_id = forecast["weather"][0]["id"]
                emoji = get_weather_emoji(weather_id)
                temp = round(forecast["main"]["temp"],1)
                wind_speed = forecast["wind"]["speed"]

                forecast_msg += f"{forecast_time} - üå° {temp}¬∞C, üí® {wind_speed} –º/—Å, {emoji}{weather_desc}\n"

        return forecast_msg

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!"

async def get_7_days_forecast():
    try:
        # API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 7-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        url = f"https://api.openweathermap.org/data/3.0/onecall?lat={LAT}&lon={LON}&lang=ru&units=metric&exclude=current,minutely,hourly&appid={WEATHER_API_KEY}"
        response = requests.get(url)
        data = response.json()

        if "daily" not in data:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!"

        daily_forecast = data["daily"]  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        forecast_msg = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 7 –¥–Ω–µ–π –≤ {CITY}</b>\n\n"

        for day_forecast in daily_forecast:
            date = datetime.datetime.utcfromtimestamp(day_forecast["dt"]).date()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
            temp_day = round(day_forecast["temp"]["day"], 1)
            wind_speed = round(day_forecast["wind_speed"], 1)
            weather_desc = day_forecast["weather"][0]["description"].capitalize()
            weather_id = day_forecast["weather"][0]["id"]
            emoji = get_weather_emoji(weather_id)

            forecast_msg += f"{date} - üå° {temp_day}¬∞C, üí® {wind_speed} –º/—Å, {emoji} {weather_desc}\n"

        return forecast_msg

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!"

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message()
async def handle_commands(message: Message):
    if message.text == "/today":
        forecast = await get_weather_forecast("today")
        await message.reply(forecast, parse_mode="HTML")
    elif message.text == "/tomorrow":
        forecast = await get_weather_forecast("tomorrow")
        await message.reply(forecast, parse_mode="HTML")

    elif message.text == "/weekend":
        forecast = await get_weather_forecast("weekend")
        await message.reply(forecast, parse_mode="HTML")

    elif message.text == "/5_days":
        forecast = await get_7_days_forecast()
        await message.reply(forecast, parse_mode="HTML")

    elif message.text == "/start":
        await message.reply("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤–∞–º –Ω—É–∂–µ–Ω:")


# –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã /start
async def send_weekend_forecast():
    forecast = await get_weather_forecast("weekend")
    await bot.send_message(CHAT_ID, forecast, parse_mode="HTML")


async def check_wind_speed_tomorrow(city=CITY):
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&lang=ru&units=metric&appid={WEATHER_API_KEY}"
        response = requests.get(url)
        data = response.json()

        if data.get("cod") != "200":
            return print ("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

        forecast_list = data["list"]
        today = datetime.date.today()
        target_date = today + datetime.timedelta(days=1)
        forecast_msg = ""
        print("–í–µ—Ç–µ—Ä –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        wind_exceeds_limit = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤–µ—Ç—Ä–∞

        for forecast in forecast_list:
            dt_txt = forecast["dt_txt"]
            forecast_date = datetime.datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S").date()
            forecast_time = dt_txt[11:16]

            if forecast_date == target_date and forecast_time in ["06:00", "09:00", "12:00", "15:00", "18:00", "21:00"]:
                wind_speed = forecast["wind"]["speed"]

                if wind_speed > 5:
                    wind_exceeds_limit = True
                    weather_desc = forecast["weather"][0]["description"].capitalize()
                    weather_id = forecast["weather"][0]["id"]
                    emoji = get_weather_emoji(weather_id)
                    temp = round(forecast["main"]["temp"],1)

                    forecast_msg += f"{forecast_time} - üå° {temp}¬∞C, üí® {wind_speed} –º/—Å, {emoji}{weather_desc}\n"

        if wind_exceeds_limit:
            forecast_msg = "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ –ö–æ—à–∞–≤–∞!\n" + forecast_msg
            await bot.send_message(CHAT_ID, forecast_msg, parse_mode="HTML")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


async def check_wind_speed(city=CITY):
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&lang=ru&units=metric&appid={WEATHER_API_KEY}"
        response = requests.get(url)
        data = response.json()

        if data.get("cod") != "200":
            return print ("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

        forecast_list = data["list"]
        target_date = datetime.date.today()
        forecast_msg = ""
        print("–í–µ—Ç–µ—Ä –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        wind_exceeds_limit = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤–µ—Ç—Ä–∞

        for forecast in forecast_list:
            dt_txt = forecast["dt_txt"]
            forecast_date = datetime.datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S").date()
            forecast_time = dt_txt[11:16]

            if forecast_date == target_date and forecast_time in ["06:00", "09:00", "12:00", "15:00", "18:00", "21:00"]:
                wind_speed = forecast["wind"]["speed"]

                if wind_speed > 5:
                    wind_exceeds_limit = True
                    weather_desc = forecast["weather"][0]["description"].capitalize()
                    weather_id = forecast["weather"][0]["id"]
                    emoji = get_weather_emoji(weather_id)
                    temp = round(forecast["main"]["temp"],1)

                    forecast_msg += f"{forecast_time} - üå° {temp}¬∞C, üí® {wind_speed} –º/—Å, {emoji}{weather_desc}\n"

        if wind_exceeds_limit:
            forecast_msg = "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è –≤–æ–∑–º–æ–∂–Ω–æ –ö–æ—à–∞–≤–∞!\n" + forecast_msg
            await bot.send_message(CHAT_ID, forecast_msg, parse_mode="HTML")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 8:00
    scheduler.add_job(send_weekend_forecast, "cron", day_of_week="wed,fri", hour=8, minute=0,
                      timezone="Europe/Belgrade")

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
    scheduler.add_job(check_wind_speed, "cron", hour=7, minute=0, timezone="Europe/Belgrade")
    scheduler.add_job(check_wind_speed_tomorrow, "cron", hour=7, minute=1, timezone="Europe/Belgrade")

    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

import asyncio
import datetime
import requests
from aiogram import Bot, Dispatcher, types

TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
WEATHER_API_KEY = "YOUR_OPENWEATHER_API_KEY"

bot = Bot(token=TOKEN)
dp = Dispatcher()

DEFAULT_CITY = "–ë–µ–ª–≥—Ä–∞–¥"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
async def get_current_weather(city: str):
    try:
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={WEATHER_API_KEY}"
        )
        data = response.json()

        if data.get("cod") != 200:
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"

        city_name = data["name"]
        cur_temp = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = sunset_timestamp - sunrise_timestamp

        return (
            f"üåç –ü–æ–≥–æ–¥–∞ –≤ **{city_name}**:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *{cur_temp}*¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: *{humidity}*%\n"
            f"üå¨ –í–µ—Ç–µ—Ä: *{wind}* –º/—Å\n"
            f"üåÄ –î–∞–≤–ª–µ–Ω–∏–µ: *{pressure}* –º–º —Ä—Ç. —Å—Ç.\n"
            f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise_timestamp.strftime('%H:%M:%S')}\n"
            f"üåá –ó–∞–∫–∞—Ç: {sunset_timestamp.strftime('%H:%M:%S')}\n"
            f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ
async def get_weekend_forecast(city: str):
    try:
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/forecast?q={city}&lang=ru&units=metric&appid={WEATHER_API_KEY}"
        )
        data = response.json()

        if data.get("cod") != "200":
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"

        forecast_message = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ **{city}** –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ:\n\n"
        weekend_days = []

        # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        today = datetime.datetime.today().date()
        for i in range(1, 7):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            check_date = today + datetime.timedelta(days=i)
            if check_date.weekday() in [5, 6]:  # 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                weekend_days.append(check_date)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º
        for forecast in data["list"]:
            forecast_time = datetime.datetime.fromtimestamp(forecast["dt"])
            forecast_date = forecast_time.date()
            if forecast_date in weekend_days:
                temp = forecast["main"]["temp"]
                wind = forecast["wind"]["speed"]
                description = forecast["weather"][0]["description"].capitalize()
                forecast_message += (
                    f"üìÜ *{forecast_date.strftime('%d.%m.%Y')}* –≤ {forecast_time.strftime('%H:%M')}:\n"
                    f"üå° *{temp}*¬∞C, {description}\n"
                    f"üå¨ –í–µ—Ç–µ—Ä: *{wind}* –º/—Å\n\n"
                )

        return forecast_message

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞!"

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ
@dp.message()
async def start_command(message: types.Message):
    if message.text == "/start":
        weather_forecast = await get_weekend_forecast(DEFAULT_CITY)
        await message.reply(weather_forecast, parse_mode="MarkdownV2")
    else:
        city = message.text.strip() or DEFAULT_CITY
        weather_info = await get_current_weather(city)
        await message.reply(weather_info, parse_mode="MarkdownV2")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

import asyncio
import requests
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import datetime

TOKEN = "7568630701:AAFRGxeRjh-kVmpfWs34j6CsNWoxpqIZEuQ"
CHAT_ID = "5659803420"  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
WEATHER_API_KEY = "914e7cc21ac51e8250c9a536e56b9a50"
CITY = "–ë–µ–ª–≥—Ä–∞–¥"

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã (09:00, 12:00, 15:00)
async def get_weekend_forecast(city=CITY, times=["09:00", "12:00", "15:00"]):
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&lang=ru&units=metric&appid={WEATHER_API_KEY}"
        response = requests.get(url)
        data = response.json()

        if data.get("cod") != "200":
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"

        forecast_list = data["list"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        days_ahead = {5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}  # 5 = –°—É–±–±–æ—Ç–∞, 6 = –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        weekend_forecast = {5: {}, 6: {}}  # –•—Ä–∞–Ω–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è

        for forecast in forecast_list:
            dt_txt = forecast["dt_txt"]  # –§–æ—Ä–º–∞—Ç: '2024-03-09 09:00:00'
            forecast_date = datetime.datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S").date()
            forecast_time = dt_txt[11:16]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è (HH:MM)
            forecast_weekday = forecast_date.weekday()

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
            if forecast_weekday in days_ahead and forecast_time in times:
                weather_desc = forecast["weather"][0]["description"].capitalize()
                temp = forecast["main"]["temp"]
                wind = forecast["wind"]["speed"]

                weekend_forecast[forecast_weekday][forecast_time] = (
                    f"üå° {temp}¬∞C, üí® {wind} –º/—Å, {weather_desc} ({forecast_time})"
                )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not weekend_forecast[5] and not weekend_forecast[6]:
            return "‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω."

        forecast_msg = f"üå§ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –≤ {CITY}</b>\n\n"
        for day in [5, 6]:  # –°—É–±–±–æ—Ç–∞ –∏ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            if weekend_forecast[day]:
                forecast_msg += f"<b>{days_ahead[day]}:</b>\n"
                for time, values in weekend_forecast[day].items():
                    forecast_msg += f"{values}\n"
                forecast_msg += "\n"

        return forecast_msg

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!"


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
async def send_weekend_forecast():
    forecast = await get_weekend_forecast()
    await bot.send_message(CHAT_ID, forecast, parse_mode="HTML")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞)
def setup_scheduler():
    scheduler.remove_all_jobs()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 18:00
    scheduler.add_job(send_weekend_forecast, "cron", day_of_week="thu", hour=10, minute=0, timezone="Europe/Belgrade")

    scheduler.start()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    setup_scheduler()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
